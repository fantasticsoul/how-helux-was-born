import type { Dict, IInnerSetStateOptions, IMutateCtx } from '../../types/base';
import type { TInternal } from './buildInternal';
import { execDepFns } from './notify';

export interface ICommitStateOptions extends IInnerSetStateOptions {
  state: Dict;
  internal: TInternal;
  mutateCtx: IMutateCtx;
  forAtom: boolean;
  sn: number;
  desc?: any;
}

export function commitState(opts: ICommitStateOptions) {
  const { state, internal } = opts;
  const { rawState, isDeep, ver, snap } = internal;

  if (isDeep) {
    internal.prevSnap = ver === 0 ? { ...snap } : snap;
    // now state is a structural shared obj generated by limu
    internal.snap = state;
    Object.assign(rawState, state);
  } else {
    internal.snap = { ...rawState };
  }

  internal.ver += 1;
  internal.sn = opts.sn;
  execDepFns(opts);
}
