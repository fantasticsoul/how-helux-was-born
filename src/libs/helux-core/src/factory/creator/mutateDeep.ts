import { isJsObj, isObj } from '@helux/utils';
import { createDraft, finishDraft, IOperateParams, limuUtils } from 'limu';
import { OP_KEYS } from '../../consts';
import type { Dict, Ext, IInnerSetStateOptions, IMutateCtx, ISetFactoryOpts } from '../../types/base';
import { genRenderSN } from '../common/key';
import { runMiddlewares } from '../common/middleware';
import { emitDataChanged } from '../common/plugin';
import { newMutateCtx, isDict } from '../common/util';
import type { TInternal } from './buildInternal';
import { handleCustomKey } from './buildShared';
import { commitState } from './commitState';
import { DRAFT_ROOT, MUTATE_CTX } from './current';
import { handleOperate } from './operateState';

interface IPrepareDeepMutateOpts extends ISetFactoryOpts {
  internal: TInternal;
  forAtom: boolean;
}

interface ICommitOpts extends IPrepareDeepMutateOpts {
  desc?: string;
  mutateCtx: IMutateCtx;
  state: any;
}

interface ISnCommitOpts extends ICommitOpts {
  sn: number;
}

interface IHandlePartialOpts {
  forAtom: boolean;
  isPrimitive: boolean;
  partial: any;
  draftRoot: any;
  draftNode: any;
}

function handleDict(draftNode: any, dict: Dict) {
  // [object Object]
  Object.keys(dict).forEach((key) => {
    // 触发 writeKeys 里记录当前变化key
    draftNode[key] = dict[key];
  });
};

export function handlePartial(opts: IHandlePartialOpts) {
  const { partial, forAtom, isPrimitive, draftRoot, draftNode } = opts;
  const isPartialDict = isDict(partial);
  // 非 atom setState 返回值，只对字典做浅合并
  if (!forAtom) {
    isPartialDict && handleDict(draftNode, partial);
    return;
  }

  const val = partial.val;
  if (isPrimitive || !isPartialDict) {
    draftRoot.val = val;
    return;
  }

  handleDict(draftNode, val);
}

/**
 * mutateNormal 和 mutateDepp 的 finishMutate 里提交之前可复用的公共逻辑
 */
export function beforeCommit(opts: ICommitOpts, innerSetOptions: IInnerSetStateOptions, draftRoot: any) {
  Object.assign(opts, innerSetOptions);
  // sn 序号相同表示同一批次触发重渲染
  // 注意 sn 和 internal.ver 不能画等号，sn 对应的将要执行函数的会有很多（包括异步函数）
  // ver 只代表提交后的最新状态版本号
  opts.sn = opts.sn || genRenderSN();
  opts.from = opts.from || 'SetState';
  const { from, sn, desc, internal } = opts;
  const draft = internal.forAtom ? draftRoot.val : draftRoot;
  internal.before({ from, draftRoot, draft, desc, sn });
  runMiddlewares(internal, draftRoot, draft, sn);
  return opts as ISnCommitOpts; // 已确保打上 sn 标记
}

export function execFinish(
  commitOpts: ICommitOpts,
  draftRoot: any,
  draftNode: any,
  partial?: Dict,
  innerSetOptions: IInnerSetStateOptions = {},
) {
  const { mutateCtx, internal } = commitOpts;
  const { writeKeys, writeKeyPathInfo, handleCbReturn } = mutateCtx;
  const { forAtom, isPrimitive } = internal;

  // TODO: discussion 是否添加 ignoreCbReturn 参数，允许用户强制忽略 cb 返回值
  if (handleCbReturn) {
    handlePartial({ partial, forAtom, isPrimitive, draftRoot, draftNode });
  }
  const opts = beforeCommit(commitOpts, innerSetOptions, draftRoot);
  mutateCtx.depKeys = Object.keys(writeKeys);
  DRAFT_ROOT.del();
  MUTATE_CTX.del();
  opts.state = finishDraft(draftRoot); // a structural shared obj generated by limu
  const { state, desc = '' } = opts;

  // 做了赋值操作但都是相同的值，结束后的草稿引用不会改变，这里直接结束 finish 流程
  // 例如 { a: { b: 1 } }
  // 某个地方操作 draft=>draft.a.b = 1; // 此操作并没有引起改变
  if (state === internal.rawState) {
    return;
  }

  mutateCtx.triggerReasons = Object.values(writeKeyPathInfo);
  commitState(opts);
  emitDataChanged(internal, innerSetOptions, desc);
}

/**
 * deep模式下，生成limu返回的草稿状态，用户可以对草稿做任意修改，且不会影响原状态
 */
export function prepareDeepMutate(opts: IPrepareDeepMutateOpts) {
  const { internal, desc = '' } = opts;
  const { forAtom, rawState } = internal;
  const mutateCtx = newMutateCtx(opts);
  const commitOpts = { state: {}, mutateCtx, ...opts, desc };
  const draftRoot = createDraft(rawState, {
    customKeys: OP_KEYS,
    onOperate: (opParams: IOperateParams) => {
      if (opParams.isCustom) {
        return handleCustomKey(opParams, forAtom, internal.sharedKey);
      }
      handleOperate(opParams, { internal, mutateCtx });
    },
  });

  // 记录正在执行中的 draftRoot mutateCtx
  DRAFT_ROOT.set(draftRoot);
  MUTATE_CTX.set(mutateCtx);
  let draftNode = draftRoot;
  // atom draft 自动拆箱
  if (forAtom) {
    draftNode = draftRoot.val;
    // 自动拆箱后，有一个隐含的 .val 读依赖被收集到 readKeys，此处刻意清空 readKeys
    // 不清空的话，如下例子因为有隐含的 .val 读取，和 .val 再赋值操作，会误判为有死循环存在
    // 清空了则 .val 读取被抹掉了，死循环探测逻辑就没有误判了
    // atomx(0).mutate(()=>anotherAtom.val+1);
    // 如果人为对 val 读取再赋值，例如使用 draftRoot.val 操作，则探测出存在死循环
    // atomx(0).mutate((draft, { draftRoot })=>draftRoot.val+=1);
    mutateCtx.readKeys = {};
  }

  return {
    draftRoot,
    draftNode,
    finishMutate(partial?: Dict, innerSetOptions: IInnerSetStateOptions = {}) {
      execFinish(commitOpts, draftRoot, draftNode, partial, innerSetOptions);
    },
  };
}
