import { createDraft, finishDraft } from 'limu';
import type { Dict, IInnerSetStateOptions } from '../../types';
import { isObj } from '../../utils';
import { runMiddlewares } from '../common/middleware';
import { emitDataChanged } from '../common/plugin';
import { newMutateCtx } from '../common/util';
import type { TInternal } from './buildInternal';
import { commitState } from './commitState';
import { handleOperate } from './operateState';

interface IPrepareDeepMutateOpts extends IInnerSetStateOptions {
  internal: TInternal;
  forAtom: boolean;
}

/**
 * deep模式下，生成limu返回的草稿状态，用户可以对草稿做任意修改，且不会影响原状态
 */
export function prepareDeepMutate(opts: IPrepareDeepMutateOpts) {
  const { internal } = opts;
  const mutateCtx = newMutateCtx(opts);
  const commitOpts = { state: {}, mutateCtx, ...opts };
  const draft = createDraft(internal.rawState, {
    onOperate(opParams) {
      handleOperate(opParams, { internal, mutateCtx });
    },
  });

  return {
    draft,
    // customOptions 是为了方便 sharedState 链里的 mutate 回调里提供一个 setOptions 句柄让用户有机会定义 setStateOptions 控制一些额外的行为
    finishMutate(partial?: Dict, customOptions?: IInnerSetStateOptions) {
      const { writeKeys, writeKeyPathInfo } = mutateCtx;
      // 把深依赖和迁依赖收集到的keys合并起来
      if (isObj(partial)) {
        Object.keys(partial).forEach((key) => {
          draft[key] = partial[key]; // 触发 writeKeys 里记录当前变化key
        });
      }

      runMiddlewares(draft, internal);
      mutateCtx.depKeys = Object.keys(writeKeys);
      commitOpts.state = finishDraft(draft); // a structural sharing obj generated by limu
      mutateCtx.triggerReasons = Object.values(writeKeyPathInfo);
      Object.assign(commitOpts, customOptions);
      commitState(commitOpts);
      emitDataChanged(internal);

      return internal.rawStateSnap;
    },
  };
}
